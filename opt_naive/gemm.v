// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gemm,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.550000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=434,HLS_SYN_LUT=515,HLS_VERSION=2018_3}" *)

module gemm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M,
        N,
        K,
        A_address0,
        A_ce0,
        A_q0,
        lda,
        B_address0,
        B_ce0,
        B_q0,
        ldb,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        ldc
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] M;
input  [31:0] N;
input  [31:0] K;
output  [17:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
input  [31:0] lda;
output  [17:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
input  [31:0] ldb;
output  [17:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] ldc;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[17:0] C_address0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] next_mul4_fu_178_p2;
reg   [31:0] next_mul4_reg_317;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul2_fu_183_p2;
reg   [31:0] next_mul2_reg_322;
wire   [30:0] i_1_fu_197_p2;
reg   [30:0] i_1_reg_330;
wire   [31:0] next_mul_fu_203_p2;
reg   [31:0] next_mul_reg_335;
wire    ap_CS_fsm_state3;
wire   [30:0] k_1_fu_217_p2;
reg   [30:0] k_1_reg_343;
wire   [0:0] tmp_3_fu_212_p2;
wire  signed [31:0] A_PART_fu_234_p1;
reg  signed [31:0] A_PART_reg_353;
wire    ap_CS_fsm_state4;
wire   [30:0] j_1_fu_247_p2;
reg   [30:0] j_1_reg_361;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_8_fu_242_p2;
reg   [17:0] C_addr_reg_371;
reg   [30:0] i_reg_109;
reg   [31:0] phi_mul1_reg_120;
reg   [31:0] phi_mul3_reg_132;
reg   [30:0] k_reg_144;
wire   [0:0] tmp_fu_192_p2;
reg   [31:0] phi_mul_reg_155;
reg   [30:0] j_reg_167;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_5_fu_229_p1;
wire  signed [63:0] tmp_s_fu_259_p1;
wire  signed [63:0] tmp_6_fu_270_p1;
wire  signed [31:0] grp_fu_279_p3;
wire   [31:0] i_cast_fu_188_p1;
wire   [31:0] k_cast_fu_208_p1;
wire   [31:0] tmp_4_fu_223_p2;
wire   [31:0] j_cast_fu_238_p1;
wire   [31:0] tmp_9_fu_253_p2;
wire   [31:0] tmp_2_fu_264_p2;
wire  signed [15:0] grp_fu_279_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

gemm_mac_muladd_16s_16s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gemm_mac_muladd_16s_16s_32ns_32_1_1_U1(
    .din0(B_q0),
    .din1(grp_fu_279_p1),
    .din2(C_q0),
    .dout(grp_fu_279_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_109 <= i_1_reg_330;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_109 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_167 <= j_1_reg_361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_167 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_144 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_242_p2 == 1'd0))) begin
        k_reg_144 <= k_1_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_120 <= next_mul2_reg_322;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul3_reg_132 <= next_mul4_reg_317;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul3_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_155 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_242_p2 == 1'd0))) begin
        phi_mul_reg_155 <= next_mul_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_PART_reg_353 <= A_PART_fu_234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        C_addr_reg_371 <= tmp_6_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_330 <= i_1_fu_197_p2;
        next_mul2_reg_322 <= next_mul2_fu_183_p2;
        next_mul4_reg_317 <= next_mul4_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_361 <= j_1_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_1_reg_343 <= k_1_fu_217_p2;
        next_mul_reg_335 <= next_mul_fu_203_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_address0 = C_addr_reg_371;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_address0 = tmp_6_fu_270_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_192_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_192_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_192_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_8_fu_242_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_PART_fu_234_p1 = $signed(A_q0);

assign A_address0 = tmp_5_fu_229_p1;

assign B_address0 = tmp_s_fu_259_p1;

assign C_d0 = grp_fu_279_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_279_p1 = A_PART_reg_353;

assign i_1_fu_197_p2 = (i_reg_109 + 31'd1);

assign i_cast_fu_188_p1 = i_reg_109;

assign j_1_fu_247_p2 = (j_reg_167 + 31'd1);

assign j_cast_fu_238_p1 = j_reg_167;

assign k_1_fu_217_p2 = (k_reg_144 + 31'd1);

assign k_cast_fu_208_p1 = k_reg_144;

assign next_mul2_fu_183_p2 = (phi_mul1_reg_120 + lda);

assign next_mul4_fu_178_p2 = (phi_mul3_reg_132 + ldc);

assign next_mul_fu_203_p2 = (phi_mul_reg_155 + ldb);

assign tmp_2_fu_264_p2 = (j_cast_fu_238_p1 + phi_mul3_reg_132);

assign tmp_3_fu_212_p2 = (($signed(k_cast_fu_208_p1) < $signed(K)) ? 1'b1 : 1'b0);

assign tmp_4_fu_223_p2 = (k_cast_fu_208_p1 + phi_mul1_reg_120);

assign tmp_5_fu_229_p1 = $signed(tmp_4_fu_223_p2);

assign tmp_6_fu_270_p1 = $signed(tmp_2_fu_264_p2);

assign tmp_8_fu_242_p2 = (($signed(j_cast_fu_238_p1) < $signed(N)) ? 1'b1 : 1'b0);

assign tmp_9_fu_253_p2 = (j_cast_fu_238_p1 + phi_mul_reg_155);

assign tmp_fu_192_p2 = (($signed(i_cast_fu_188_p1) < $signed(M)) ? 1'b1 : 1'b0);

assign tmp_s_fu_259_p1 = $signed(tmp_9_fu_253_p2);

endmodule //gemm
