// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gemm,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.151312,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=33,HLS_SYN_FF=993,HLS_SYN_LUT=1312,HLS_VERSION=2018_3}" *)

module gemm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M,
        N,
        K,
        A_address0,
        A_ce0,
        A_q0,
        lda,
        B_address0,
        B_ce0,
        B_q0,
        ldb,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        ldc
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] M;
input  [31:0] N;
input  [31:0] K;
output  [17:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
input  [31:0] lda;
output  [17:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
input  [31:0] ldb;
output  [17:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] ldc;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg[17:0] C_address0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [95:0] indvar_flatten1_reg_135;
reg   [30:0] i_reg_146;
reg   [63:0] indvar_flatten_reg_158;
reg   [30:0] k_reg_169;
reg   [30:0] j_reg_180;
wire   [63:0] bound_fu_199_p2;
reg   [63:0] bound_reg_478;
wire    ap_CS_fsm_state2;
wire   [95:0] bound7_fu_212_p2;
reg   [95:0] bound7_reg_501;
wire   [0:0] tmp_8_mid_fu_218_p2;
reg   [0:0] tmp_8_mid_reg_506;
wire   [31:0] tmp_6_fu_242_p2;
reg   [31:0] tmp_6_reg_511;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond_flatten1_fu_256_p2;
reg   [0:0] exitcond_flatten1_reg_516;
wire   [95:0] indvar_flatten_next1_fu_261_p2;
reg   [95:0] indvar_flatten_next1_reg_520;
reg    ap_enable_reg_pp0_iter0;
wire   [30:0] i_s_fu_267_p2;
reg   [30:0] i_s_reg_525;
wire   [0:0] exitcond_flatten_fu_277_p2;
reg   [0:0] exitcond_flatten_reg_530;
wire   [30:0] k_mid_fu_282_p3;
reg   [30:0] k_mid_reg_538;
wire   [0:0] tmp_8_mid1_fu_319_p3;
reg   [0:0] tmp_8_mid1_reg_543;
wire   [30:0] k_1_fu_326_p2;
reg   [30:0] k_1_reg_550;
wire   [31:0] k_cast_fu_332_p1;
reg   [31:0] k_cast_reg_555;
wire   [30:0] j_cast_mid2_fu_355_p3;
reg   [30:0] j_cast_mid2_reg_565;
wire   [30:0] j_op_fu_363_p2;
reg   [30:0] j_op_reg_570;
wire   [63:0] indvar_flatten_op_fu_369_p2;
reg   [63:0] indvar_flatten_op_reg_575;
wire   [30:0] tmp_2_mid2_v_fu_375_p3;
reg   [30:0] tmp_2_mid2_v_reg_580;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg  signed [15:0] A_load_reg_585;
wire   [30:0] k_mid2_fu_410_p3;
reg   [30:0] k_mid2_reg_590;
reg   [17:0] C_addr_reg_600;
wire   [30:0] j_1_fu_443_p3;
reg   [30:0] j_1_reg_605;
wire   [63:0] indvar_flatten_next_fu_450_p3;
reg   [63:0] indvar_flatten_next_reg_610;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [95:0] ap_phi_mux_indvar_flatten1_phi_fu_139_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] ap_phi_mux_i_phi_fu_150_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_162_p4;
reg   [30:0] ap_phi_mux_k_phi_fu_173_p4;
reg   [30:0] ap_phi_mux_j_phi_fu_184_p4;
wire  signed [63:0] A_PART_mid2_v_fu_350_p1;
wire  signed [63:0] tmp_s_fu_421_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] tmp_10_fu_432_p1;
wire  signed [31:0] grp_fu_463_p3;
wire   [31:0] bound_fu_199_p0;
wire   [31:0] bound_fu_199_p1;
wire   [63:0] bound7_fu_212_p0;
wire   [31:0] bound7_fu_212_p1;
wire  signed [31:0] tmp_1_fu_227_p0;
wire   [30:0] tmp_1_fu_227_p1;
wire   [31:0] tmp_1_fu_227_p2;
wire   [31:0] k_cast_mid1_fu_232_p1;
wire  signed [31:0] tmp_6_fu_242_p0;
wire   [30:0] tmp_6_fu_242_p1;
wire   [31:0] j_cast_fu_247_p1;
wire  signed [31:0] tmp_1_mid1_fu_290_p0;
wire   [30:0] tmp_1_mid1_fu_290_p1;
wire   [31:0] tmp_1_mid1_fu_290_p2;
wire   [31:0] tmp_4_fu_236_p2;
wire   [0:0] tmp_8_fu_251_p2;
wire   [31:0] tmp_1_mid2_fu_295_p3;
wire   [31:0] A_PART_mid224_v_v_fu_303_p3;
wire   [31:0] tmp_4_mid1_fu_336_p2;
wire   [31:0] A_PART_mid2_v_v_fu_342_p3;
wire   [30:0] j_cast_mid_fu_311_p3;
wire  signed [31:0] tmp_2_mid2_fu_385_p0;
wire   [30:0] tmp_2_mid2_fu_385_p1;
wire  signed [31:0] tmp_6_mid1_fu_396_p0;
wire   [30:0] tmp_6_mid1_fu_396_p1;
wire   [31:0] tmp_6_mid_fu_390_p3;
wire   [31:0] tmp_6_mid1_fu_396_p2;
wire   [31:0] tmp_6_mid2_fu_400_p3;
wire   [31:0] j_cast_mid2_cast_fu_407_p1;
wire   [31:0] tmp_9_fu_415_p2;
wire   [31:0] tmp_2_mid2_fu_385_p2;
wire   [31:0] tmp_5_fu_426_p2;
wire   [30:0] j_mid212_op_fu_437_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] bound7_fu_212_p00;
wire   [95:0] bound7_fu_212_p10;
wire   [63:0] bound_fu_199_p00;
wire   [63:0] bound_fu_199_p10;
wire   [31:0] tmp_1_fu_227_p10;
wire   [31:0] tmp_1_mid1_fu_290_p10;
wire   [31:0] tmp_2_mid2_fu_385_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

gemm_mac_muladd_16s_16s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gemm_mac_muladd_16s_16s_32ns_32_1_1_U1(
    .din0(A_load_reg_585),
    .din1(B_q0),
    .din2(C_q0),
    .dout(grp_fu_463_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_146 <= tmp_2_mid2_v_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_146 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten1_reg_135 <= indvar_flatten_next1_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten1_reg_135 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_158 <= indvar_flatten_next_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_158 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_180 <= j_1_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_180 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_reg_169 <= k_mid2_reg_590;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_169 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_load_reg_585 <= A_q0;
        C_addr_reg_600 <= tmp_10_fu_432_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound7_reg_501 <= bound7_fu_212_p2;
        tmp_8_mid_reg_506 <= tmp_8_mid_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_478 <= bound_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_516 <= exitcond_flatten1_fu_256_p2;
        tmp_6_reg_511 <= tmp_6_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_530 <= exitcond_flatten_fu_277_p2;
        i_s_reg_525 <= i_s_fu_267_p2;
        indvar_flatten_op_reg_575 <= indvar_flatten_op_fu_369_p2;
        j_cast_mid2_reg_565 <= j_cast_mid2_fu_355_p3;
        j_op_reg_570 <= j_op_fu_363_p2;
        k_1_reg_550 <= k_1_fu_326_p2;
        k_cast_reg_555[30 : 0] <= k_cast_fu_332_p1[30 : 0];
        k_mid_reg_538 <= k_mid_fu_282_p3;
        tmp_8_mid1_reg_543 <= tmp_8_mid1_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next1_reg_520 <= indvar_flatten_next1_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten_next_reg_610 <= indvar_flatten_next_fu_450_p3;
        j_1_reg_605 <= j_1_fu_443_p3;
        k_mid2_reg_590 <= k_mid2_fu_410_p3;
        tmp_2_mid2_v_reg_580 <= tmp_2_mid2_v_fu_375_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        C_address0 = C_addr_reg_600;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        C_address0 = tmp_10_fu_432_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_150_p4 = tmp_2_mid2_v_reg_580;
    end else begin
        ap_phi_mux_i_phi_fu_150_p4 = i_reg_146;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten1_phi_fu_139_p4 = indvar_flatten_next1_reg_520;
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_139_p4 = indvar_flatten1_reg_135;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_162_p4 = indvar_flatten_next_reg_610;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_162_p4 = indvar_flatten_reg_158;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_184_p4 = j_1_reg_605;
    end else begin
        ap_phi_mux_j_phi_fu_184_p4 = j_reg_180;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_516 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_173_p4 = k_mid2_reg_590;
    end else begin
        ap_phi_mux_k_phi_fu_173_p4 = k_reg_169;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten1_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_PART_mid224_v_v_fu_303_p3 = ((exitcond_flatten_fu_277_p2[0:0] === 1'b1) ? tmp_1_mid1_fu_290_p2 : tmp_4_fu_236_p2);

assign A_PART_mid2_v_fu_350_p1 = $signed(A_PART_mid2_v_v_fu_342_p3);

assign A_PART_mid2_v_v_fu_342_p3 = ((tmp_8_mid1_fu_319_p3[0:0] === 1'b1) ? A_PART_mid224_v_v_fu_303_p3 : tmp_4_mid1_fu_336_p2);

assign A_address0 = A_PART_mid2_v_fu_350_p1;

assign B_address0 = tmp_s_fu_421_p1;

assign C_d0 = grp_fu_463_p3;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound7_fu_212_p0 = bound7_fu_212_p00;

assign bound7_fu_212_p00 = bound_reg_478;

assign bound7_fu_212_p1 = bound7_fu_212_p10;

assign bound7_fu_212_p10 = M;

assign bound7_fu_212_p2 = (bound7_fu_212_p0 * bound7_fu_212_p1);

assign bound_fu_199_p0 = bound_fu_199_p00;

assign bound_fu_199_p00 = N;

assign bound_fu_199_p1 = bound_fu_199_p10;

assign bound_fu_199_p10 = K;

assign bound_fu_199_p2 = (bound_fu_199_p0 * bound_fu_199_p1);

assign exitcond_flatten1_fu_256_p2 = ((ap_phi_mux_indvar_flatten1_phi_fu_139_p4 == bound7_reg_501) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_277_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_162_p4 == bound_reg_478) ? 1'b1 : 1'b0);

assign i_s_fu_267_p2 = (ap_phi_mux_i_phi_fu_150_p4 + 31'd1);

assign indvar_flatten_next1_fu_261_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_139_p4 + 96'd1);

assign indvar_flatten_next_fu_450_p3 = ((exitcond_flatten_reg_530[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_reg_575);

assign indvar_flatten_op_fu_369_p2 = (ap_phi_mux_indvar_flatten_phi_fu_162_p4 + 64'd1);

assign j_1_fu_443_p3 = ((tmp_8_mid1_reg_543[0:0] === 1'b1) ? j_mid212_op_fu_437_p3 : 31'd1);

assign j_cast_fu_247_p1 = ap_phi_mux_j_phi_fu_184_p4;

assign j_cast_mid2_cast_fu_407_p1 = j_cast_mid2_reg_565;

assign j_cast_mid2_fu_355_p3 = ((tmp_8_mid1_fu_319_p3[0:0] === 1'b1) ? j_cast_mid_fu_311_p3 : 31'd0);

assign j_cast_mid_fu_311_p3 = ((exitcond_flatten_fu_277_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_j_phi_fu_184_p4);

assign j_mid212_op_fu_437_p3 = ((exitcond_flatten_reg_530[0:0] === 1'b1) ? 31'd1 : j_op_reg_570);

assign j_op_fu_363_p2 = (ap_phi_mux_j_phi_fu_184_p4 + 31'd1);

assign k_1_fu_326_p2 = (k_mid_fu_282_p3 + 31'd1);

assign k_cast_fu_332_p1 = k_1_fu_326_p2;

assign k_cast_mid1_fu_232_p1 = ap_phi_mux_k_phi_fu_173_p4;

assign k_mid2_fu_410_p3 = ((tmp_8_mid1_reg_543[0:0] === 1'b1) ? k_mid_reg_538 : k_1_reg_550);

assign k_mid_fu_282_p3 = ((exitcond_flatten_fu_277_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_k_phi_fu_173_p4);

assign tmp_10_fu_432_p1 = $signed(tmp_5_fu_426_p2);

assign tmp_1_fu_227_p0 = lda;

assign tmp_1_fu_227_p1 = tmp_1_fu_227_p10;

assign tmp_1_fu_227_p10 = ap_phi_mux_i_phi_fu_150_p4;

assign tmp_1_fu_227_p2 = ($signed(tmp_1_fu_227_p0) * $signed({{1'b0}, {tmp_1_fu_227_p1}}));

assign tmp_1_mid1_fu_290_p0 = lda;

assign tmp_1_mid1_fu_290_p1 = tmp_1_mid1_fu_290_p10;

assign tmp_1_mid1_fu_290_p10 = i_s_fu_267_p2;

assign tmp_1_mid1_fu_290_p2 = ($signed(tmp_1_mid1_fu_290_p0) * $signed({{1'b0}, {tmp_1_mid1_fu_290_p1}}));

assign tmp_1_mid2_fu_295_p3 = ((exitcond_flatten_fu_277_p2[0:0] === 1'b1) ? tmp_1_mid1_fu_290_p2 : tmp_1_fu_227_p2);

assign tmp_2_mid2_fu_385_p0 = ldc;

assign tmp_2_mid2_fu_385_p1 = tmp_2_mid2_fu_385_p10;

assign tmp_2_mid2_fu_385_p10 = tmp_2_mid2_v_fu_375_p3;

assign tmp_2_mid2_fu_385_p2 = ($signed(tmp_2_mid2_fu_385_p0) * $signed({{1'b0}, {tmp_2_mid2_fu_385_p1}}));

assign tmp_2_mid2_v_fu_375_p3 = ((exitcond_flatten_reg_530[0:0] === 1'b1) ? i_s_reg_525 : i_reg_146);

assign tmp_4_fu_236_p2 = (tmp_1_fu_227_p2 + k_cast_mid1_fu_232_p1);

assign tmp_4_mid1_fu_336_p2 = (tmp_1_mid2_fu_295_p3 + k_cast_fu_332_p1);

assign tmp_5_fu_426_p2 = (tmp_2_mid2_fu_385_p2 + j_cast_mid2_cast_fu_407_p1);

assign tmp_6_fu_242_p0 = ldb;

assign tmp_6_fu_242_p1 = k_cast_mid1_fu_232_p1;

assign tmp_6_fu_242_p2 = ($signed(tmp_6_fu_242_p0) * $signed({{1'b0}, {tmp_6_fu_242_p1}}));

assign tmp_6_mid1_fu_396_p0 = ldb;

assign tmp_6_mid1_fu_396_p1 = k_cast_reg_555;

assign tmp_6_mid1_fu_396_p2 = ($signed(tmp_6_mid1_fu_396_p0) * $signed({{1'b0}, {tmp_6_mid1_fu_396_p1}}));

assign tmp_6_mid2_fu_400_p3 = ((tmp_8_mid1_reg_543[0:0] === 1'b1) ? tmp_6_mid_fu_390_p3 : tmp_6_mid1_fu_396_p2);

assign tmp_6_mid_fu_390_p3 = ((exitcond_flatten_reg_530[0:0] === 1'b1) ? 32'd0 : tmp_6_reg_511);

assign tmp_8_fu_251_p2 = (($signed(j_cast_fu_247_p1) < $signed(N)) ? 1'b1 : 1'b0);

assign tmp_8_mid1_fu_319_p3 = ((exitcond_flatten_fu_277_p2[0:0] === 1'b1) ? tmp_8_mid_reg_506 : tmp_8_fu_251_p2);

assign tmp_8_mid_fu_218_p2 = (($signed(N) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_9_fu_415_p2 = (tmp_6_mid2_fu_400_p3 + j_cast_mid2_cast_fu_407_p1);

assign tmp_s_fu_421_p1 = $signed(tmp_9_fu_415_p2);

always @ (posedge ap_clk) begin
    k_cast_reg_555[31] <= 1'b0;
end

endmodule //gemm
