// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_in_loop_loo (
        K,
        N,
        i,
        lda,
        A_address0,
        A_ce0,
        A_d0,
        A_q0,
        A_we0,
        A_address1,
        A_ce1,
        A_d1,
        A_q1,
        A_we1,
        ldb,
        B_address0,
        B_ce0,
        B_d0,
        B_q0,
        B_we0,
        B_address1,
        B_ce1,
        B_d1,
        B_q1,
        B_we1,
        ldc,
        C_address0,
        C_ce0,
        C_d0,
        C_q0,
        C_we0,
        C_address1,
        C_ce1,
        C_d1,
        C_q1,
        C_we1,
        ap_clk,
        ap_rst,
        K_ap_vld,
        N_ap_vld,
        i_ap_vld,
        lda_ap_vld,
        ldb_ap_vld,
        ldc_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] K;
input  [31:0] N;
input  [30:0] i;
input  [31:0] lda;
output  [17:0] A_address0;
output   A_ce0;
output  [15:0] A_d0;
input  [15:0] A_q0;
output   A_we0;
output  [17:0] A_address1;
output   A_ce1;
output  [15:0] A_d1;
input  [15:0] A_q1;
output   A_we1;
input  [31:0] ldb;
output  [17:0] B_address0;
output   B_ce0;
output  [15:0] B_d0;
input  [15:0] B_q0;
output   B_we0;
output  [17:0] B_address1;
output   B_ce1;
output  [15:0] B_d1;
input  [15:0] B_q1;
output   B_we1;
input  [31:0] ldc;
output  [17:0] C_address0;
output   C_ce0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output   C_we0;
output  [17:0] C_address1;
output   C_ce1;
output  [31:0] C_d1;
input  [31:0] C_q1;
output   C_we1;
input   ap_clk;
input   ap_rst;
input   K_ap_vld;
input   N_ap_vld;
input   i_ap_vld;
input   lda_ap_vld;
input   ldb_ap_vld;
input   ldc_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    loopk_proc_U0_ap_start;
wire    loopk_proc_U0_ap_done;
wire    loopk_proc_U0_ap_continue;
wire    loopk_proc_U0_ap_idle;
wire    loopk_proc_U0_ap_ready;
wire   [17:0] loopk_proc_U0_A_address0;
wire    loopk_proc_U0_A_ce0;
wire   [17:0] loopk_proc_U0_B_address0;
wire    loopk_proc_U0_B_ce0;
wire   [17:0] loopk_proc_U0_C_address0;
wire    loopk_proc_U0_C_ce0;
wire    loopk_proc_U0_C_we0;
wire   [31:0] loopk_proc_U0_C_d0;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    loopk_proc_U0_start_full_n;
wire    loopk_proc_U0_start_write;

loopk_proc loopk_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(loopk_proc_U0_ap_start),
    .ap_done(loopk_proc_U0_ap_done),
    .ap_continue(loopk_proc_U0_ap_continue),
    .ap_idle(loopk_proc_U0_ap_idle),
    .ap_ready(loopk_proc_U0_ap_ready),
    .K(K),
    .N(N),
    .i(i),
    .lda(lda),
    .A_address0(loopk_proc_U0_A_address0),
    .A_ce0(loopk_proc_U0_A_ce0),
    .A_q0(A_q0),
    .ldb(ldb),
    .B_address0(loopk_proc_U0_B_address0),
    .B_ce0(loopk_proc_U0_B_ce0),
    .B_q0(B_q0),
    .ldc(ldc),
    .C_address0(loopk_proc_U0_C_address0),
    .C_ce0(loopk_proc_U0_C_ce0),
    .C_we0(loopk_proc_U0_C_we0),
    .C_d0(loopk_proc_U0_C_d0),
    .C_q0(C_q0)
);

assign A_address0 = loopk_proc_U0_A_address0;

assign A_address1 = 18'd0;

assign A_ce0 = loopk_proc_U0_A_ce0;

assign A_ce1 = 1'b0;

assign A_d0 = 16'd0;

assign A_d1 = 16'd0;

assign A_we0 = 1'b0;

assign A_we1 = 1'b0;

assign B_address0 = loopk_proc_U0_B_address0;

assign B_address1 = 18'd0;

assign B_ce0 = loopk_proc_U0_B_ce0;

assign B_ce1 = 1'b0;

assign B_d0 = 16'd0;

assign B_d1 = 16'd0;

assign B_we0 = 1'b0;

assign B_we1 = 1'b0;

assign C_address0 = loopk_proc_U0_C_address0;

assign C_address1 = 18'd0;

assign C_ce0 = loopk_proc_U0_C_ce0;

assign C_ce1 = 1'b0;

assign C_d0 = loopk_proc_U0_C_d0;

assign C_d1 = 32'd0;

assign C_we0 = loopk_proc_U0_C_we0;

assign C_we1 = 1'b0;

assign ap_done = loopk_proc_U0_ap_done;

assign ap_idle = loopk_proc_U0_ap_idle;

assign ap_ready = loopk_proc_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = loopk_proc_U0_ap_done;

assign ap_sync_ready = loopk_proc_U0_ap_ready;

assign loopk_proc_U0_ap_continue = ap_continue;

assign loopk_proc_U0_ap_start = ap_start;

assign loopk_proc_U0_start_full_n = 1'b1;

assign loopk_proc_U0_start_write = 1'b0;

endmodule //dataflow_in_loop_loo
